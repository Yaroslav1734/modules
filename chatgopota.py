# 
#                 ‚ñà‚ñë‚ñë‚ÄÉ‚ñà‚ÄÉ‚ñÄ‚ñà‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ
#                 ‚ñà‚ñÑ‚ñÑ‚ÄÉ‚ñà‚ÄÉ‚ñë‚ñà‚ñë‚ÄÉ‚ñà‚ñà‚ñÑ
# 
#               ¬© Copyright 2023
# 
#          Licensed under the GNU GPLv3
#      https://www.gnu.org/licenses/agpl-3.0.html

# requires: chatgptpy
# meta developer: @imalite
# meta desc: Module for chatting with ChatGPT


import logging
import re
from pychatgpt import Chat
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class ChatGoPoTaMod(loader.Module):
    """Module for chatting with ChatGPT"""

    strings = {
        "name": "ChatGoPoTa",
        "no_args": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " Specify arguments!</b>"
        ),
        "error": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            "  There was an error"
            ", maybe you specified the wrong email and password"
            ", or maybe OpenAI is not supported in your country.</b>"
        ),
        "chat": (
            "<b><emoji document_id=5305794398938735107>üí≠</emoji>"
            " Your question: </b>{}"
            "\n<b><emoji document_id=5372981976804366741>ü§ñ</emoji> ChatGPT answer: </b>{}"
        ),
        "no_email": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " You didn't specified email!</b>"
        ),
        "email_not_valid": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " Email that you specified is not valid!</b>"
        ),
        "no_password": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " You didn't specified password!</b>"
        ),
        "password_not_valid": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " Password that you specified is not valid!</b>"
        ),
        "email_set": (
            "<b><emoji document_id=5188216731453103384>‚úîÔ∏è</emoji>"
            " Email is set!<b>"
        ),
        "password_set": (
            "<b><emoji document_id=5188216731453103384>‚úîÔ∏è</emoji>"
            " Password is set!<b>"
        )
    }

    strings_ru = {
        "no_args": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " –£–∫–∞–∂–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>"
        ),
        "error": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            "  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            ", –≤–æ–∑–º–æ–∂–Ω–æ —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ—á—Ç—É"
            ", –∏–ª–∏ –º–æ–∂–µ—Ç OpenAI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–µ.</b>"
        ),
        "chat": (
            "<b><emoji document_id=5305794398938735107>üí≠</emoji>"
            " –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: </b>{}"
            "\n<b><emoji document_id=5372981976804366741>ü§ñ</emoji> –û—Ç–≤–µ—Ç ChatGPT: </b>{}"
        ),
        "no_email": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ—á—Ç—É!</b>"
        ),
        "email_not_valid": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " –ü–æ—á—Ç–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω–∞—è!</b>"
        ),
        "no_password": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–∞—Ä–æ–ª—å!</b>"
        ),
        "password_not_valid": (
            "<b><emoji document_id=5465665476971471368>‚ùå</emoji>"
            " –ü–∞—Ä–æ–ª—å –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π!</b>"
        ),
        "email_set": (
            "<b><emoji document_id=5188216731453103384>‚úîÔ∏è</emoji>"
            " –ü–æ—á—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!<b>"
        ),
        "password_set": (
            "<b><emoji document_id=5188216731453103384>‚úîÔ∏è</emoji>"
            " –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!<b>"
        )
    }

    def __init__(self) -> None:
        ...
    
    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.command(
        ru_doc = "<–≤–æ–ø—Ä–æ—Å> - –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å ChatGPT"
    )
    async def chatgpt(self, message: Message):
        """<question> - Start conversation with ChatGPT"""

        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(
                message,
                self.strings["no_args"]
            )
            return
        
        try:
            chat = Chat(self.get("email", ""), self.get("password", ""))
        except:
            await utils.answer(
                message,
                self.strings["error"]
            )
            return
        
        answer, _, _ = chat.ask(args)
        await utils.answer(
            message,
            self.strings["chat"].format(
                utils.escape_html(args),
                utils.escape_html(answer)
            )
        )
    
    @loader.command(
        ru_doc = "<email> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email –∞–∫–∫–∞—É–Ω—Ç–∞ OpenAI"
    )
    async def email(self, message: Message):
        """<email> - Set OpenAI account email"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(
                message,
                self.strings["no_email"]
            )
            return
        
        if not re.match(r"^\S+@\S+\.\S+$", args):
            await utils.answer(
                message,
                self.strings["email_not_valid"]
            )
            return
        
        self.set("email", args)
        await utils.answer(
            message,
            self.strings["email_set"]
        )

    @loader.command(
        ru_doc = "<password> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ OpenAI"
    )
    async def password(self, message: Message):
        """<password> - Set OpenAI account password"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(
                message,
                self.strings["no_password"]
            )
        if len(args) < 5:
            await utils.answer(
                message,
                self.strings["password_not_valid"]
            )
            return
        
        cyrillic = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
        is_cyrillic = cyrillic.intersection(args.lower()) != set()
        if is_cyrillic: # cyrillic symbols in openai password is not allowed
            await utils.answer(
                message,
                self.strings["password_not_valid"]
            )
            return
        
        self.set("password", args)
        await utils.answer(
            message,
            self.strings["password_set"]
        )